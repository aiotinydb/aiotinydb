[build-system]
requires = ["flit_core >=3.4,<4"]
build-backend = "flit_core.buildapi"

[project]
name = 'aiotinydb'
version = '2.0.0'
description = 'asyncio compatibility shim for tinydb'
readme = "README.md"
requires-python = ">=3.6"
license = { file = "LICENSE.md" }
authors = [{ name = "Pavel Pletenev", email = "cpp.create@gmail.com" }]
maintainers = [{ name = "d-k-bo", email = "dkbo@mail.de" }]
classifiers = [
    'License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)',
    'Development Status :: 4 - Beta',
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.6",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    'Topic :: Software Development :: Libraries :: Python Modules',
    'Operating System :: OS Independent',
    'Intended Audience :: Developers',
]
dependencies = ['tinydb>=4.7.0', 'aiofiles>=0.8.0']

    [project.urls]
    Source = "https://github.com/aiotinydb/aiotinydb"

[tool.flake8]
max-line-length = 100
# F401 -- imported but unused // using pylint
# F811 -- redefinition of unused // using pylint
# F821 -- undefined name // using pylint
# F841 -- local variable is assigned to but never used // using pylint
# E241 -- multiple spaces after ':'
# E272 -- multiple spaces before keyword
# E221 -- multiple spaces before operator
# W503 -- line break before binary operator
# E301 -- expected 1 blank line // class compactness
ignore = [
    "F401",
    "F811",
    "F821",
    "F841",
    "E241",
    "E272",
    "E221",
    "W503",
    "E301",
]
inline-quotes = "'"


[tool.coverage.report]
show_missing = true
exclude_lines = ["pragma: no cover", "raise NotImplementedError"]

[tool.pylint.master]
fail-under = 10
ignore = ["CVS"]
jobs = 1
limit-inference-results = 100
persistent = true
# py-version = [3, 10]
suggestion-mode = true

[tool.pylint.basic]
argument-naming-style = "snake_case"
argument-rgx = "(([a-z][a-z0-9_]{2,30})|(_[a-z0-9_]*))$"
attr-naming-style = "snake_case"
attr-rgx = "(([a-z][a-z0-9_]{2,30})|(_[a-z0-9_]*))$"
bad-names = ["foo", "bar", "baz", "toto", "tutu", "tata"]
class-attribute-naming-style = "any"
class-attribute-rgx = "([A-Za-z_][A-Za-z0-9_]{2,30}|(__.*__))$"
class-const-naming-style = "UPPER_CASE"
class-naming-style = "PascalCase"
class-rgx = "[A-Z_][a-zA-Z0-9]+$"
const-naming-style = "UPPER_CASE"
const-rgx = "(([A-Z_][A-Z0-9_]*)|(__.*__))$"
docstring-min-length = -1
function-naming-style = "snake_case"
function-rgx = "(([a-z][a-z0-9_]{2,30})|(_[a-z0-9_]*))$"
good-names = ["i", "j", "k", "ex", "Run", "_"]
inlinevar-naming-style = "any"
inlinevar-rgx = "[A-Za-z_][A-Za-z0-9_]*$"
method-naming-style = "snake_case"
method-rgx = "(([a-z][a-z0-9_]{2,30})|(_[a-z0-9_]*))$"
module-naming-style = "snake_case"
module-rgx = "(([a-z_][a-z0-9_]*)|([A-Z][a-zA-Z0-9]+))$"
no-docstring-rgx = "^_"
property-classes = ["abc.abstractproperty"]
variable-naming-style = "snake_case"
variable-rgx = "(([a-z][a-z0-9_]{2,30})|(_[a-z0-9_]*))$"

[tool.pylint.classes]
defining-attr-methods = ["__init__", "__new__", "setUp"]
exclude-protected = ["_asdict", "_fields", "_replace", "_source", "_make"]
valid-classmethod-first-arg = ["cls"]
valid-metaclass-classmethod-first-arg = ["mcs"]

[tool.pylint.commands]

[tool.pylint.design]
max-args = 5
max-attributes = 7
max-bool-expr = 5
max-branches = 12
max-locals = 15
max-parents = 7
max-public-methods = 20
max-returns = 6
max-statements = 50
min-public-methods = 2

[tool.pylint.exceptions]
overgeneral-exceptions = ["Exception"]

[tool.pylint.format]
ignore-long-lines = "^\\s*(# )?<?https?://\\S+>?$"
indent-after-paren = 4
indent-string = "    "
max-line-length = 100
max-module-lines = 1000

[tool.pylint.imports]
deprecated-modules = ["optparse", "tkinter.tix"]
known-third-party = ["enchant"]

[tool.pylint.logging]
logging-format-style = "old"
logging-modules = ["logging"]

[tool.pylint."messages control"]
disable = [
    "raw-checker-failed",
    "bad-inline-option",
    "locally-disabled",
    "file-ignored",
    "suppressed-message",
    "useless-suppression",
    "deprecated-pragma",
    "use-symbolic-message-instead",
]
enable = ["c-extension-no-member"]

[tool.pylint.miscellaneous]
notes = ["FIXME", "XXX", "TODO"]

[tool.pylint.refactoring]
max-nested-blocks = 5
never-returning-functions = ["sys.exit", "argparse.parse_error"]

[tool.pylint.reports]
evaluation = "10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)"
score = true

[tool.pylint.similarities]
ignore-comments = true
ignore-docstrings = true
min-similarity-lines = 4

[tool.pylint.spelling]
max-spelling-suggestions = 4
spelling-ignore-comment-directives = "fmt: on,fmt: off,noqa:,noqa,nosec,isort:skip,mypy:"

[tool.pylint.string]

[tool.pylint.typecheck]
contextmanager-decorators = ["contextlib.contextmanager"]
ignore-mixin-members = true
ignore-none = true
ignore-on-opaque-inference = true
ignored-checks-for-mixins = [
    "no-member",
    "not-async-context-manager",
    "not-context-manager",
    "attribute-defined-outside-init",
]
ignored-classes = ["optparse.Values", "thread._local", "_thread._local"]
missing-member-hint = true
missing-member-hint-distance = 1
missing-member-max-choices = 1
mixin-class-rgx = ".*[Mm]ixin"

[tool.pylint.variables]
allow-global-unused-variables = true
callbacks = ["cb_", "_cb"]
dummy-variables-rgx = "_+$|(_[a-zA-Z0-9_]*[a-zA-Z0-9]+?$)|dummy|^ignored_|^unused_"
ignored-argument-names = "_.*|^ignored_|^unused_"
redefining-builtins-modules = ["six.moves", "future.builtins"]
